<html>
<head>
    <title>Draft of Event Plan Template</title>
    <meta name="decorator" content="atl.admin">
    <meta name="admin.active.section" content="admin_project_menu/project_section"/>
    <meta name="admin.active.tab" content="event_plans"/>
    $webResourceManager.requireResource("edu.uz.jira.event.planner.event-planner:event-plans-configuration-resources")
</head>
<body>
<section class="aui-page-panel-content">
    <table class="jiraform jirapanel maxWidth">
        <tbody>
        <tr>
            <td class="jiraformheader">
                <a class="help-lnk" href="https://docs.atlassian.com/jira/docs-064/Defining+a+Screen"
                   title="Get online help about Placing fields on screens" data-helplink="online" target="_jirahelp"
                   style="float: right;"><span class="aui-icon aui-icon-small aui-iconfont-help">
            Get help!
        </span></a>
                <h3 class="formtitle">Draft of Event Plan Template</h3>
            </td>
        </tr>
        <tr>
            <td class="jiraformbody">
                <p>
                    This page shows the way the fields are organised on <b id="plan-name"></b> screen.
                </p>

                <p>
                    <span class="warning">Note</span>: when the screen is shown to the user only non-hidden fields that
                    the user has permissions to edit will be actually displayed.
                </p>
            </td>
        </tr>
        </tbody>
    </table>


</section>

    #include("templates/admin/dialogs/event-category-dialog.vm")
    #include("templates/admin/dialogs/component-dialog.vm")
    #include("templates/admin/dialogs/task-dialog.vm")
    #include("templates/admin/dialogs/subtask-dialog.vm")

<script type="text/javascript">
    function getParameterByName(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }

    AJS.$(document).ready(
            function () {
                jQuery('#').innerHTML = getParameterByName('name');
            }
    );

    var plan = new Plan();
    var eventCategory = new Category();
    var component = new Component();
    var task = new Task();
    var subTask = new SubTask();

    var subTaskListener = new ButtonListener(subTask);
    subTaskListener.onBackShowDialogForResourceId(task.id);
    subTaskListener.onNextShowDialogForResourceId('plan-summary');
    subTaskListener.onCancelCloseDialog();

    var taskListener = new ButtonListener(task);
    taskListener.onBackShowDialogForResourceId(component.id);
    taskListener.onNextShowDialogForResourceId(subTask.id);
    taskListener.onCancelCloseDialog();

    var componentListener = new ButtonListener(component);
    componentListener.onShowDoGetResource([component, task]);
    componentListener.onBackShowDialogForResourceId(eventCategory.id);
    componentListener.onNextShowDialogForResourceId(task.id);
    componentListener.onCancelCloseDialog();

    var categoryListener = new ButtonListener(eventCategory);
    categoryListener.onShowDoGetResource([eventCategory]);
    categoryListener.onNextShowDialogForResourceId(component.id);
    categoryListener.onBackShowDialogForResourceId(plan.id);
    categoryListener.onCancelCloseDialog();
    categoryListener.onAddNewResourceAppendItToAvailableResourcesList();

    var planListener = new ButtonListener(plan)
    planListener.onAddShowDialog();
    planListener.onNextShowDialogForResourceId(eventCategory.id);
    planListener.onCancelCloseDialog();

    jQuery("ul.connectedSortable").sortable({
        connectWith: "ul",
        dropOnEmpty: true,
        cursor: "move"
    }).disableSelection();
</script>
</body>
</html>
