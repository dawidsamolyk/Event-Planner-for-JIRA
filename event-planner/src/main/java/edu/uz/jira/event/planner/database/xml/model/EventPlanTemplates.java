//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.01.08 at 06:58:36 PM CET 
//
package edu.uz.jira.event.planner.database.xml.model;

import edu.uz.jira.event.planner.project.plan.rest.ActiveObjectWrapper;
import net.java.ao.Entity;
import net.java.ao.RawEntity;

import javax.xml.bind.annotation.*;
import java.util.ArrayList;
import java.util.List;

/**
 * XML representation of many Event Plan Templates.
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
        "eventPlan"
})
@XmlRootElement(name = "event-plans")
public class EventPlanTemplates implements ActiveObjectWrapper {
    @XmlElement(name = "event-plan")
    private List<PlanTemplate> eventPlan;

    public List<PlanTemplate> getEventPlanTemplate() {
        if (eventPlan == null) {
            eventPlan = new ArrayList<PlanTemplate>();
        }
        return this.eventPlan;
    }

    public void setEventPlan(List<PlanTemplate> eventPlan) {
        this.eventPlan = eventPlan;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        EventPlanTemplates that = (EventPlanTemplates) o;

        return !(getEventPlanTemplate() != null ? !getEventPlanTemplate().equals(that.getEventPlanTemplate()) : that.getEventPlanTemplate() != null);
    }

    @Override
    public int hashCode() {
        return getEventPlanTemplate() != null ? getEventPlanTemplate().hashCode() : 0;
    }

    @Override
    public Class<? extends RawEntity> getWrappedType() {
        throw new UnsupportedOperationException();
    }

    @Override
    public ActiveObjectWrapper fill(Entity entity) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean isFullfilled() {
        return !eventPlan.isEmpty();
    }

    @Override
    public ActiveObjectWrapper getEmptyCopy() {
        return new EventPlanTemplates();
    }
}
